import java.io.*;
import java.util.*;
/*
 * input :
 * first line contains integers n, denoting number of requests 
 * next n line contains two space separated integers l and r, denoting start and end time of each process
 * 
 * eg input:
 * 	9
	1 3
	2 6
	4 7
	6 9
	5 12
	8 11
	10 13
	10 15
	14 16

 */
public class GreedyIntervalSheduling {
	static int[] b;

	public static void main(String[] args) {
		Scanner in = new Scanner(System.in);
		int sheduleSize = 0, n;

		n = in.nextInt();
		int[][] requests = new int[2][n];
		int[] status = new int[n];
		for (int i = 0; i < n; i++) {
			requests[1][i] = in.nextInt();
			requests[0][i] = in.nextInt();
		}
		sort(requests, 0, n - 1);
		for (int i = 0; i < n; i++) {
			if (status[i] == 0) {
				System.out.println(requests[1][i]);
				sheduleSize++;
				ripOff(requests, i, n, status);
			}

		}

		System.out.println(sheduleSize);

	}

	static void merge(int arr[][], int l, int m, int r) {
		if (l == r)
			return;
		int n1 = m - l + 1;
		int n2 = r - m;

		int L[] = new int[n1];
		int R[] = new int[n2];
		int L1[] = new int[n1];
		int R1[] = new int[n2];

		for (int i = 0; i < n1; ++i) {
			L[i] = arr[0][l + i];
			L1[i] = arr[1][l + i];
		}
		for (int j = 0; j < n2; ++j) {
			R[j] = arr[0][m + 1 + j];
			R1[j] = arr[1][m + 1 + j];
		}

		int i = 0, j = 0;

		int k = l;
		while (i < n1 && j < n2) {
			if (L[i] <= R[j]) {
				arr[1][k] = L1[i];
				arr[0][k] = L[i];
				i++;
			} else {
				arr[1][k] = R1[j];
				arr[0][k] = R[j];
				j++;
			}
			k++;
		}

		while (i < n1) {
			arr[0][k] = L[i];
			arr[1][k] = L1[i];
			i++;
			k++;
		}

		while (j < n2) {
			arr[1][k] = R1[j];
			arr[0][k] = R[j];
			j++;
			k++;
		}
	}

	static void sort(int arr[][], int l, int r) {
		if (l < r) {

			int m = (l + r) / 2;

			sort(arr, l, m);
			sort(arr, m + 1, r);

			merge(arr, l, m, r);
		}

	}

	static void ripOff(int[][] req, int ind, int n, int[] status) {
		for (int i = ind + 1; i < n; i++) {
			if (req[1][i] >= req[0][ind]) {
			} else {
				status[i] = 1;
			}
		}
	}

}
